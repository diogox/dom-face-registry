// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package registry is a generated GoMock package.
package registry

import (
	context "context"
	face "github.com/diogox/dom-face-registry/internal/face"
	person "github.com/diogox/dom-face-registry/internal/person"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockPersonService is a mock of PersonService interface
type MockPersonService struct {
	ctrl     *gomock.Controller
	recorder *MockPersonServiceMockRecorder
}

// MockPersonServiceMockRecorder is the mock recorder for MockPersonService
type MockPersonServiceMockRecorder struct {
	mock *MockPersonService
}

// NewMockPersonService creates a new mock instance
func NewMockPersonService(ctrl *gomock.Controller) *MockPersonService {
	mock := &MockPersonService{ctrl: ctrl}
	mock.recorder = &MockPersonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonService) EXPECT() *MockPersonServiceMockRecorder {
	return m.recorder
}

// GetPeople mocks base method
func (m *MockPersonService) GetPeople(ctx context.Context) ([]person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople", ctx)
	ret0, _ := ret[0].([]person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople
func (mr *MockPersonServiceMockRecorder) GetPeople(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*MockPersonService)(nil).GetPeople), ctx)
}

// FindPersonByID mocks base method
func (m *MockPersonService) FindPersonByID(ctx context.Context, id uuid.UUID) (person.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonByID", ctx, id)
	ret0, _ := ret[0].(person.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPersonByID indicates an expected call of FindPersonByID
func (mr *MockPersonServiceMockRecorder) FindPersonByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonByID", reflect.TypeOf((*MockPersonService)(nil).FindPersonByID), ctx, id)
}

// AddPerson mocks base method
func (m *MockPersonService) AddPerson(ctx context.Context, info person.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPerson", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPerson indicates an expected call of AddPerson
func (mr *MockPersonServiceMockRecorder) AddPerson(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockPersonService)(nil).AddPerson), ctx, info)
}

// RemovePerson mocks base method
func (m *MockPersonService) RemovePerson(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePerson", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePerson indicates an expected call of RemovePerson
func (mr *MockPersonServiceMockRecorder) RemovePerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePerson", reflect.TypeOf((*MockPersonService)(nil).RemovePerson), ctx, id)
}

// MockFaceService is a mock of FaceService interface
type MockFaceService struct {
	ctrl     *gomock.Controller
	recorder *MockFaceServiceMockRecorder
}

// MockFaceServiceMockRecorder is the mock recorder for MockFaceService
type MockFaceServiceMockRecorder struct {
	mock *MockFaceService
}

// NewMockFaceService creates a new mock instance
func NewMockFaceService(ctrl *gomock.Controller) *MockFaceService {
	mock := &MockFaceService{ctrl: ctrl}
	mock.recorder = &MockFaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaceService) EXPECT() *MockFaceServiceMockRecorder {
	return m.recorder
}

// RecognizeFace mocks base method
func (m *MockFaceService) RecognizeFace(ctx context.Context, imgBytes []byte) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecognizeFace", ctx, imgBytes)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecognizeFace indicates an expected call of RecognizeFace
func (mr *MockFaceServiceMockRecorder) RecognizeFace(ctx, imgBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecognizeFace", reflect.TypeOf((*MockFaceService)(nil).RecognizeFace), ctx, imgBytes)
}

// FindFacesByPersonID mocks base method
func (m *MockFaceService) FindFacesByPersonID(ctx context.Context, personID uuid.UUID) ([]face.Face, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFacesByPersonID", ctx, personID)
	ret0, _ := ret[0].([]face.Face)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFacesByPersonID indicates an expected call of FindFacesByPersonID
func (mr *MockFaceServiceMockRecorder) FindFacesByPersonID(ctx, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFacesByPersonID", reflect.TypeOf((*MockFaceService)(nil).FindFacesByPersonID), ctx, personID)
}

// AddFace mocks base method
func (m *MockFaceService) AddFace(ctx context.Context, imgBytes []byte, personID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFace", ctx, imgBytes, personID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFace indicates an expected call of AddFace
func (mr *MockFaceServiceMockRecorder) AddFace(ctx, imgBytes, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFace", reflect.TypeOf((*MockFaceService)(nil).AddFace), ctx, imgBytes, personID)
}

// RemoveFace mocks base method
func (m *MockFaceService) RemoveFace(ctx context.Context, faceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFace", ctx, faceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFace indicates an expected call of RemoveFace
func (mr *MockFaceServiceMockRecorder) RemoveFace(ctx, faceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFace", reflect.TypeOf((*MockFaceService)(nil).RemoveFace), ctx, faceID)
}
