// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package person is a generated GoMock package.
package person

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetPeople mocks base method
func (m *MockStore) GetPeople(ctx context.Context) ([]Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople", ctx)
	ret0, _ := ret[0].([]Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople
func (mr *MockStoreMockRecorder) GetPeople(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*MockStore)(nil).GetPeople), ctx)
}

// FindPersonByID mocks base method
func (m *MockStore) FindPersonByID(ctx context.Context, id uuid.UUID) (Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPersonByID", ctx, id)
	ret0, _ := ret[0].(Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPersonByID indicates an expected call of FindPersonByID
func (mr *MockStoreMockRecorder) FindPersonByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPersonByID", reflect.TypeOf((*MockStore)(nil).FindPersonByID), ctx, id)
}

// CreatePerson mocks base method
func (m *MockStore) CreatePerson(ctx context.Context, person Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, person)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePerson indicates an expected call of CreatePerson
func (mr *MockStoreMockRecorder) CreatePerson(ctx, person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockStore)(nil).CreatePerson), ctx, person)
}

// DeletePerson mocks base method
func (m *MockStore) DeletePerson(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson
func (mr *MockStoreMockRecorder) DeletePerson(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockStore)(nil).DeletePerson), ctx, id)
}
