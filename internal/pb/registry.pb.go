// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registry.proto

package DomFaceRegistry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("registry.proto", fileDescriptor_41af05d40a615591) }

var fileDescriptor_41af05d40a615591 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4a, 0x4d, 0xcf,
	0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x77, 0xc9, 0xcf, 0x75,
	0x4b, 0x4c, 0x4e, 0x0d, 0x82, 0x0a, 0x4b, 0x71, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x43, 0x64, 0xa5,
	0x44, 0x0b, 0x52, 0x8b, 0x8a, 0xf3, 0xf3, 0xe2, 0x51, 0x35, 0x49, 0x09, 0xa7, 0x25, 0x26, 0xa7,
	0xa2, 0x09, 0x1a, 0xcd, 0x65, 0xe1, 0xe2, 0x41, 0x36, 0x49, 0x28, 0x84, 0x8b, 0xd3, 0x3d, 0xb5,
	0x24, 0x20, 0x35, 0xbf, 0x20, 0x27, 0x55, 0x48, 0x51, 0x0f, 0xcd, 0x22, 0x3d, 0xb8, 0x5c, 0x50,
	0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x94, 0x12, 0x3e, 0x25, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9,
	0x4a, 0x0c, 0x20, 0x53, 0x1d, 0x53, 0x52, 0x02, 0xc0, 0xee, 0xc2, 0x62, 0x2a, 0x5c, 0x0e, 0xb7,
	0xa9, 0x48, 0x4a, 0xe0, 0xa6, 0xc6, 0x72, 0xf1, 0x04, 0xa5, 0xe6, 0xe6, 0x97, 0xa5, 0x42, 0x0d,
	0x56, 0xc1, 0xd0, 0x85, 0x2c, 0x0d, 0x33, 0x5b, 0x95, 0x80, 0x2a, 0xb8, 0xf1, 0xe1, 0x5c, 0xbc,
	0x41, 0xa9, 0xc9, 0xf9, 0xe9, 0x79, 0x99, 0x55, 0xa9, 0x20, 0xf5, 0x42, 0x52, 0x18, 0x3a, 0x41,
	0x1c, 0xcf, 0xdc, 0xc4, 0xf4, 0x54, 0x29, 0x35, 0x2c, 0xa6, 0x22, 0xe9, 0x45, 0x18, 0xab, 0xc1,
	0x28, 0x14, 0xc0, 0xc5, 0xee, 0x98, 0x92, 0x02, 0x36, 0x52, 0x1e, 0x9b, 0x47, 0x21, 0x7c, 0x88,
	0x6b, 0x15, 0x70, 0x2b, 0x40, 0x32, 0x31, 0x9c, 0x8b, 0x0b, 0xe2, 0x09, 0xb0, 0xa1, 0x4a, 0x38,
	0x7c, 0x88, 0x6c, 0xae, 0x32, 0x5e, 0x35, 0x30, 0xa3, 0x93, 0xd8, 0xc0, 0xc9, 0xc4, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x27, 0x1c, 0xd7, 0x68, 0x82, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceRegistryClient is the client API for FaceRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceRegistryClient interface {
	GetPeople(ctx context.Context, in *GetPeopleRequest, opts ...grpc.CallOption) (*GetPeopleResponse, error)
	AddPerson(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*AddPersonResponse, error)
	RemovePerson(ctx context.Context, in *RemovePersonRequest, opts ...grpc.CallOption) (*RemovePersonResponse, error)
	RecognizeFace(ctx context.Context, opts ...grpc.CallOption) (FaceRegistry_RecognizeFaceClient, error)
	AddFace(ctx context.Context, opts ...grpc.CallOption) (FaceRegistry_AddFaceClient, error)
	RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*RemoveFaceResponse, error)
}

type faceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewFaceRegistryClient(cc *grpc.ClientConn) FaceRegistryClient {
	return &faceRegistryClient{cc}
}

func (c *faceRegistryClient) GetPeople(ctx context.Context, in *GetPeopleRequest, opts ...grpc.CallOption) (*GetPeopleResponse, error) {
	out := new(GetPeopleResponse)
	err := c.cc.Invoke(ctx, "/DomFaceRegistry.FaceRegistry/GetPeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRegistryClient) AddPerson(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*AddPersonResponse, error) {
	out := new(AddPersonResponse)
	err := c.cc.Invoke(ctx, "/DomFaceRegistry.FaceRegistry/AddPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRegistryClient) RemovePerson(ctx context.Context, in *RemovePersonRequest, opts ...grpc.CallOption) (*RemovePersonResponse, error) {
	out := new(RemovePersonResponse)
	err := c.cc.Invoke(ctx, "/DomFaceRegistry.FaceRegistry/RemovePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceRegistryClient) RecognizeFace(ctx context.Context, opts ...grpc.CallOption) (FaceRegistry_RecognizeFaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaceRegistry_serviceDesc.Streams[0], "/DomFaceRegistry.FaceRegistry/RecognizeFace", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceRegistryRecognizeFaceClient{stream}
	return x, nil
}

type FaceRegistry_RecognizeFaceClient interface {
	Send(*FaceImage) error
	CloseAndRecv() (*RecognizeFaceResponse, error)
	grpc.ClientStream
}

type faceRegistryRecognizeFaceClient struct {
	grpc.ClientStream
}

func (x *faceRegistryRecognizeFaceClient) Send(m *FaceImage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faceRegistryRecognizeFaceClient) CloseAndRecv() (*RecognizeFaceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RecognizeFaceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *faceRegistryClient) AddFace(ctx context.Context, opts ...grpc.CallOption) (FaceRegistry_AddFaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FaceRegistry_serviceDesc.Streams[1], "/DomFaceRegistry.FaceRegistry/AddFace", opts...)
	if err != nil {
		return nil, err
	}
	x := &faceRegistryAddFaceClient{stream}
	return x, nil
}

type FaceRegistry_AddFaceClient interface {
	Send(*AddFaceRequest) error
	CloseAndRecv() (*AddFaceResponse, error)
	grpc.ClientStream
}

type faceRegistryAddFaceClient struct {
	grpc.ClientStream
}

func (x *faceRegistryAddFaceClient) Send(m *AddFaceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *faceRegistryAddFaceClient) CloseAndRecv() (*AddFaceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddFaceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *faceRegistryClient) RemoveFace(ctx context.Context, in *RemoveFaceRequest, opts ...grpc.CallOption) (*RemoveFaceResponse, error) {
	out := new(RemoveFaceResponse)
	err := c.cc.Invoke(ctx, "/DomFaceRegistry.FaceRegistry/RemoveFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceRegistryServer is the server API for FaceRegistry service.
type FaceRegistryServer interface {
	GetPeople(context.Context, *GetPeopleRequest) (*GetPeopleResponse, error)
	AddPerson(context.Context, *AddPersonRequest) (*AddPersonResponse, error)
	RemovePerson(context.Context, *RemovePersonRequest) (*RemovePersonResponse, error)
	RecognizeFace(FaceRegistry_RecognizeFaceServer) error
	AddFace(FaceRegistry_AddFaceServer) error
	RemoveFace(context.Context, *RemoveFaceRequest) (*RemoveFaceResponse, error)
}

// UnimplementedFaceRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedFaceRegistryServer struct {
}

func (*UnimplementedFaceRegistryServer) GetPeople(ctx context.Context, req *GetPeopleRequest) (*GetPeopleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeople not implemented")
}
func (*UnimplementedFaceRegistryServer) AddPerson(ctx context.Context, req *AddPersonRequest) (*AddPersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPerson not implemented")
}
func (*UnimplementedFaceRegistryServer) RemovePerson(ctx context.Context, req *RemovePersonRequest) (*RemovePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePerson not implemented")
}
func (*UnimplementedFaceRegistryServer) RecognizeFace(srv FaceRegistry_RecognizeFaceServer) error {
	return status.Errorf(codes.Unimplemented, "method RecognizeFace not implemented")
}
func (*UnimplementedFaceRegistryServer) AddFace(srv FaceRegistry_AddFaceServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFace not implemented")
}
func (*UnimplementedFaceRegistryServer) RemoveFace(ctx context.Context, req *RemoveFaceRequest) (*RemoveFaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFace not implemented")
}

func RegisterFaceRegistryServer(s *grpc.Server, srv FaceRegistryServer) {
	s.RegisterService(&_FaceRegistry_serviceDesc, srv)
}

func _FaceRegistry_GetPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRegistryServer).GetPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DomFaceRegistry.FaceRegistry/GetPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRegistryServer).GetPeople(ctx, req.(*GetPeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRegistry_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRegistryServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DomFaceRegistry.FaceRegistry/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRegistryServer).AddPerson(ctx, req.(*AddPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRegistry_RemovePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRegistryServer).RemovePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DomFaceRegistry.FaceRegistry/RemovePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRegistryServer).RemovePerson(ctx, req.(*RemovePersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaceRegistry_RecognizeFace_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaceRegistryServer).RecognizeFace(&faceRegistryRecognizeFaceServer{stream})
}

type FaceRegistry_RecognizeFaceServer interface {
	SendAndClose(*RecognizeFaceResponse) error
	Recv() (*FaceImage, error)
	grpc.ServerStream
}

type faceRegistryRecognizeFaceServer struct {
	grpc.ServerStream
}

func (x *faceRegistryRecognizeFaceServer) SendAndClose(m *RecognizeFaceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faceRegistryRecognizeFaceServer) Recv() (*FaceImage, error) {
	m := new(FaceImage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FaceRegistry_AddFace_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FaceRegistryServer).AddFace(&faceRegistryAddFaceServer{stream})
}

type FaceRegistry_AddFaceServer interface {
	SendAndClose(*AddFaceResponse) error
	Recv() (*AddFaceRequest, error)
	grpc.ServerStream
}

type faceRegistryAddFaceServer struct {
	grpc.ServerStream
}

func (x *faceRegistryAddFaceServer) SendAndClose(m *AddFaceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *faceRegistryAddFaceServer) Recv() (*AddFaceRequest, error) {
	m := new(AddFaceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FaceRegistry_RemoveFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceRegistryServer).RemoveFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DomFaceRegistry.FaceRegistry/RemoveFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceRegistryServer).RemoveFace(ctx, req.(*RemoveFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DomFaceRegistry.FaceRegistry",
	HandlerType: (*FaceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPeople",
			Handler:    _FaceRegistry_GetPeople_Handler,
		},
		{
			MethodName: "AddPerson",
			Handler:    _FaceRegistry_AddPerson_Handler,
		},
		{
			MethodName: "RemovePerson",
			Handler:    _FaceRegistry_RemovePerson_Handler,
		},
		{
			MethodName: "RemoveFace",
			Handler:    _FaceRegistry_RemoveFace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecognizeFace",
			Handler:       _FaceRegistry_RecognizeFace_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddFace",
			Handler:       _FaceRegistry_AddFace_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "registry.proto",
}
