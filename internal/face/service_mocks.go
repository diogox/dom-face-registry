// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package face is a generated GoMock package.
package face

import (
	context "context"
	recognizer "github.com/diogox/dom-face-registry/internal/face/recognizer"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetFaces mocks base method
func (m *MockStore) GetFaces(ctx context.Context) ([]Face, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaces", ctx)
	ret0, _ := ret[0].([]Face)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaces indicates an expected call of GetFaces
func (mr *MockStoreMockRecorder) GetFaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaces", reflect.TypeOf((*MockStore)(nil).GetFaces), ctx)
}

// FindFacesByPersonID mocks base method
func (m *MockStore) FindFacesByPersonID(ctx context.Context, personID uuid.UUID) ([]Face, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFacesByPersonID", ctx, personID)
	ret0, _ := ret[0].([]Face)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFacesByPersonID indicates an expected call of FindFacesByPersonID
func (mr *MockStoreMockRecorder) FindFacesByPersonID(ctx, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFacesByPersonID", reflect.TypeOf((*MockStore)(nil).FindFacesByPersonID), ctx, personID)
}

// AddFace mocks base method
func (m *MockStore) AddFace(ctx context.Context, encoding recognizer.Encoding, imgBytes []byte, personID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFace", ctx, encoding, imgBytes, personID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFace indicates an expected call of AddFace
func (mr *MockStoreMockRecorder) AddFace(ctx, encoding, imgBytes, personID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFace", reflect.TypeOf((*MockStore)(nil).AddFace), ctx, encoding, imgBytes, personID)
}

// RemoveFace mocks base method
func (m *MockStore) RemoveFace(ctx context.Context, faceID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFace", ctx, faceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFace indicates an expected call of RemoveFace
func (mr *MockStoreMockRecorder) RemoveFace(ctx, faceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFace", reflect.TypeOf((*MockStore)(nil).RemoveFace), ctx, faceID)
}
